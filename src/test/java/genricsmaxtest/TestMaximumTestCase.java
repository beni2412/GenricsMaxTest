/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package genricsmaxtest;

import org.junit.Test;

import com.capg.testmax.TestMaximum;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Assert;

public class TestMaximumTestCase{
	@Test
	public void givenFirst_Greater_ShouldReturnFirstInteger() {
		TestMaximum test = new TestMaximum();
		ArrayList<Integer> array = new ArrayList<>();
    	array = test.addVal(100,90,80,70);
		Integer result = (Integer) test.maximumInArrayList(array);
		boolean finalResult=false; 
		if(result == 100) {
		finalResult = true;
		} 
		Assert.assertEquals(true, finalResult);;
	}
	@Test
	public void givenSecond_Greater_ShouldReturnSecondInteger() {
		TestMaximum test = new TestMaximum();
		ArrayList<Integer> array = new ArrayList<>();
    	array = test.addVal(90,100,80,70);
		Integer result = (Integer) test.maximumInArrayList(array);
		boolean finalResult=false; 
		if(result == 100) {
		finalResult = true;
		} 
		Assert.assertEquals(true, finalResult);;
	}
	@Test
	public void givenThird_Greater_ShouldReturnThirdInteger() {
		TestMaximum test = new TestMaximum();
		ArrayList<Integer> array = new ArrayList<>();
    	array = test.addVal(90,80,100,70);
		Integer result = (Integer) test.maximumInArrayList(array);
		boolean finalResult=false; 
		if(result == 100) {
		finalResult = true;
		} 
		Assert.assertEquals(true, finalResult);;
	}
	@Test
	public void givenFirst_Greater_ShouldReturnFirstFloat() {
		TestMaximum test = new TestMaximum();
		ArrayList<Float> array = new ArrayList<>();
    	array = test.addVal(100f,90f,80f,70f);
		Float result = (Float) test.maximumInArrayList(array);
		boolean finalResult=false; 
		if(result == 100f) {
		finalResult = true;
		} 
		Assert.assertEquals(true, finalResult);;
	}
	@Test
	public void givenSecond_Greater_ShouldReturnSecondFloat() {
		TestMaximum test = new TestMaximum();
		ArrayList<Float> array = new ArrayList<>();
    	array = test.addVal(90f,100f,80f,70f);
		Float result = (Float) test.maximumInArrayList(array);
		boolean finalResult=false; 
		if(result == 100f) {
		finalResult = true;
		} 
		Assert.assertEquals(true, finalResult);;
	}
	@Test
	public void givenThird_Greater_ShouldReturnThirdFloat() {
		TestMaximum test = new TestMaximum();
		ArrayList<Float> array = new ArrayList<>();
    	array = test.addVal(90f,80f,100f,70f);
		Float result = (Float) test.maximumInArrayList(array);
		boolean finalResult=false; 
		if(result == 100f) {
		finalResult = true;
		} 
		Assert.assertEquals(true, finalResult);;
	}
	@Test
	public void givenFirst_Greater_ShouldReturnFirstString() {
		TestMaximum test = new TestMaximum();
		ArrayList<String> array = new ArrayList<>();
    	array = test.addVal("peach","banana","apple","cat");
		String result = (String) test.maximumInArrayList(array);
		boolean finalResult=false; 
		if(result.equalsIgnoreCase("peach")) {
		finalResult = true;
		} 
		Assert.assertEquals(true, finalResult);;
	}
	@Test
	public void givenSecond_Greater_ShouldReturnSecondString() {
		TestMaximum test = new TestMaximum();
		ArrayList<String> array = new ArrayList<>();
    	array = test.addVal("banana","peach","apple","cat");
		String result = (String) test.maximumInArrayList(array);
		boolean finalResult=false; 
		if(result.equalsIgnoreCase("peach")) {
		finalResult = true;
		} 
		Assert.assertEquals(true, finalResult);;
	}
	@Test
	public void givenThird_Greater_ShouldReturnThirdString() {
		TestMaximum test = new TestMaximum();
		ArrayList<String> array = new ArrayList<>();
    	array = test.addVal("banana","apple","peach","cat");
		String result = (String) test.maximumInArrayList(array);
		boolean finalResult=false; 
		if(result.equalsIgnoreCase("peach")) {
		finalResult = true;
		} 
		Assert.assertEquals(true, finalResult);;
	}
}
